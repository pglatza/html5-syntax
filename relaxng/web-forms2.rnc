datatypes w = "http://whattf.org/datatype-draft"

# #####################################################################
##  RELAX NG Schema for HTML 5: Web Forms 2.0 markup                  #
# #####################################################################

## Shared attributes for form controls

	common-form.attrs &=
		( common-form.attrs.form? )

	common-form.attrs.form = 
		attribute form {
			#"" | common.data.idrefs #REVISIT spec says space--not whitespace
			string #FIXME
		}

	common-form.attrs.inputmode = 
		attribute inputmode {
			form.data.inputmode
		}

	common-form.attrs.method = 
		attribute method {
			w:string "get" | w:string "post" | w:string "put" | w:string "delete"
		}
		
	common-form.attrs.autofocus = 
		attribute autofocus {
			w:string "autofocus" | w:string ""
		}
	
	common-form.attrs.pattern = 
		attribute pattern {
			form.data.pattern
		}
		
	common-form.attrs.replace = 
		attribute replace {
			w:string "document" | w:string "values"
		}

	common-form.attrs.action = 
		attribute action {
			common.data.uri
		}
	
	common-form.attrs.target = 
		attribute target {
			common.data.browsingcontext
		}

	common-form.attrs.template = 
		attribute template {
			common.data.idref
		}

	common-form.attrs.data = 
		attribute data {
			common.data.uri
		}

	common-form.attrs.required = 
		attribute required {
			w:string "required" | w:string ""
		}

## Shared attributes for <input>
		
	input.attrs.autocomplete = 
		attribute autocomplete {
			w:string "on" | w:string "off"
		}
			
	# REVISIT should this be case-insensitive in conforming XHTML documents?
	input.attrs.enctype = 
		attribute enctype {
			(	w:string "application/x-www-form-urlencoded" 
			|	w:string "multipart/form-data"
			|	w:string "application/x-www-form+xml"
			|	w:string "text/plain"
			)
		}
		
	input.attrs.list = 
		attribute list {
			common.data.idref
		}
	
	input.attrs.step.float = 
		attribute step {
			w:string "any" | form.data.float.positive
		}
	
	input.attrs.step.integer = 
		attribute step {
			w:string "any" | common.data.integer.positive 
		}
		
## Text Field: <input type='text'>, Extensions

	input.text.attrs &=
		(	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	common-form.attrs.inputmode? 
		&	input.attrs.list? 
		&	common-form.attrs.pattern? 
		&	common-form.attrs.required? 
		)

## Password Field: <input type='password'>, Extensions

	input.password.attrs &=
		(	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	common-form.attrs.inputmode? 
		&	common-form.attrs.pattern? 
		&	common-form.attrs.required? 
		)

## Checkbox <input type='checkbox'>, Extensions

	input.checkbox.attrs &=
		(	common-form.attrs.autofocus? 
		&	common-form.attrs.required? 
		)

## Radiobutton: <input type='radio'>, Extensions

	input.radio.attrs &=
		(	common-form.attrs.autofocus? 
		&	common-form.attrs.required? 
		)

## Scripting Hook Button: <input type='button'>, Extensions

	input.button.attrs &=
		( common-form.attrs.autofocus? )

## Submit Button: <input type='submit'>, Extensions

	input.submit.attrs &=
		(	common-form.attrs.action? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.enctype? 
		&	common-form.attrs.method? 
		&	common-form.attrs.replace? 
		&	common-form.attrs.target? 
		)

## Reset Button: <input type='reset'>, Extensions

	input.reset.attrs &=
		( common-form.attrs.autofocus? )

## File Upload: <input type='file'>, Extensions

	input.file.attrs &=
		(	common-form.attrs.autofocus? 
		&	common-form.attrs.required? 
		&	input.file.attrs.min? 
		&	input.file.attrs.max? 
		)
		input.file.attrs.min =
			attribute min {
				common.data.integer.non-negative
			}
		input.file.attrs.max =
			attribute max {
				common.data.integer.positive
			}

## Image Submit Button: <input type='image'>, Extensions

	input.image.attrs &=
		(	common-form.attrs.action? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.enctype? 
		&	common-form.attrs.method? 
		&	common-form.attrs.replace? 
		&	common-form.attrs.target? 
		)	

## Date and Time with Time Zone Set to UTC: <input type='datetime'>

	input.datetime.elem = 
		element input { input.datetime.attrs }	
	input.datetime.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.datetime.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.datetime.attrs.min? 
		&	input.datetime.attrs.max? 
		&	input.attrs.step.float? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.datetime.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.datetime.attrs.type = 
			attribute type {
				w:string "datetime"
			}
		input.datetime.attrs.min =
			attribute min {
				form.data.datetime
			}
		input.datetime.attrs.max =
			attribute max {
				form.data.datetime			
			}	
		input.datetime.attrs.value =
			attribute value {
				form.data.datetime
			}
		
	input.elem |= input.datetime.elem

## Date and Time with No Time Zone Information: <input type='datetime-local'>

	input.datetime-local.elem = 
		element input { input.datetime-local.attrs }
	input.datetime-local.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.datetime-local.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.datetime-local.attrs.min? 
		&	input.datetime-local.attrs.max? 
		&	input.attrs.step.float? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.datetime-local.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.datetime-local.attrs.type = 
			attribute type {
				w:string "datetime-local"
			}
		input.datetime-local.attrs.min =
			attribute min {
				form.data.datetime-local
			}
		input.datetime-local.attrs.max =
			attribute max {
				form.data.datetime-local			
			}	
		input.datetime-local.attrs.value =
			attribute value {
				form.data.datetime-local
			}
		
	input.elem |= input.datetime-local.elem

## Date: <input type='date'>

	input.date.elem = 
		element input { input.date.attrs }
	input.date.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.date.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.date.attrs.min? 
		&	input.date.attrs.max? 
		&	input.attrs.step.integer? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.date.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.date.attrs.type = 
			attribute type {
				w:string "date"
			}
		input.date.attrs.min =
			attribute min {
				form.data.date
			}
		input.date.attrs.max =
			attribute max {
				form.data.date			
			}	
		input.date.attrs.value =
			attribute value {
				form.data.date
			}
		
	input.elem |= input.date.elem

## Year and Month: <input type='month'>

	input.month.elem = 
		element input { input.month.attrs }
	input.month.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.month.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.month.attrs.min? 
		&	input.month.attrs.max? 
		&	input.attrs.step.integer? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.month.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.month.attrs.type = 
			attribute type {
				w:string "month"
			}
		input.month.attrs.min =
			attribute min {
				form.data.month
			}
		input.month.attrs.max =
			attribute max {
				form.data.month			
			}	
		input.month.attrs.value =
			attribute value {
				form.data.month
			}
		
	input.elem |= input.month.elem

## Time without Time Zone Information: <input type='time'>

	input.time.elem = 
		element input { input.time.attrs }
	input.time.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.time.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.time.attrs.min? 
		&	input.time.attrs.max? 
		&	input.attrs.step.float? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.time.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.time.attrs.type = 
			attribute type {
				w:string "time"
			}
		input.time.attrs.min =
			attribute min {
				form.data.time
			}
		input.time.attrs.max =
			attribute max {
				form.data.time			
			}	
		input.time.attrs.value =
			attribute value {
				form.data.time
			}
		
	input.elem |= input.time.elem

## Year and Week: <input type='week'>

	input.week.elem = 
		element input { input.week.attrs }
	input.week.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.week.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.week.attrs.min? 
		&	input.week.attrs.max? 
		&	input.attrs.step.integer? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.week.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.week.attrs.type = 
			attribute type {
				w:string "week"
			}
		input.week.attrs.min =
			attribute min {
				form.data.week
			}
		input.week.attrs.max =
			attribute max {
				form.data.week			
			}	
		input.week.attrs.value =
			attribute value {
				form.data.week
			}
		
	input.elem |= input.week.elem

## Number: <input type='number'>

	input.number.elem = 
		element input { input.number.attrs }
	input.number.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.number.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.number.attrs.min? 
		&	input.number.attrs.max? 
		&	input.attrs.step.float? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.number.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.number.attrs.type = 
			attribute type {
				w:string "number"
			}
		input.number.attrs.min =
			attribute min {
				form.data.float
			}
		input.number.attrs.max =
			attribute max {
				form.data.float			
			}	
		input.number.attrs.value =
			attribute value {
				form.data.float
			}
		
	input.elem |= input.number.elem

## Imprecise Number: <input type='range'>

	input.range.elem = 
		element input { input.range.attrs }
	input.range.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.range.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.list? 
		&	input.range.attrs.min? 
		&	input.range.attrs.max? 
		&	input.attrs.step.float? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.range.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.range.attrs.type = 
			attribute type {
				w:string "range"
			}
		input.range.attrs.min =
			attribute min {
				form.data.float
			}
		input.range.attrs.max =
			attribute max {
				form.data.float			
			}	
		input.range.attrs.value =
			attribute value {
				form.data.float
			}
		
	input.elem |= input.range.elem

## Email Address: <input type='email'>

	input.email.elem = 
		element input { input.email.attrs }	
	input.email.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.email.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	common-form.attrs.inputmode? 
		&	input.attrs.list? 
		&	common-form.attrs.maxlength? 
		&	common-form.attrs.pattern? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.email.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.email.attrs.type = 
			attribute type {
				w:string "email"
			}
		input.email.attrs.value =
			attribute value {
				form.data.email
			}
		
	input.elem |= input.email.elem

## IRI: <input type='url'>

	input.url.elem = 
		element input { input.url.attrs }	
	input.url.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.url.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.autocomplete? 
		&	common-form.attrs.autofocus? 
		&	common-form.attrs.inputmode? 
		&	input.attrs.list? 
		&	common-form.attrs.maxlength? 
		&	common-form.attrs.pattern? 
		&	common-form.attrs.readonly? 
		&	common-form.attrs.required? 
		&	input.url.attrs.value? 
		&	common.attrs.aria.implicit.input?
		)	
		input.url.attrs.type = 
			attribute type {
				w:string "url"
			}
		input.url.attrs.value =
			attribute value {
				w:string "" | common.data.uri.absolute
			}
		
	input.elem |= input.url.elem

## Form Output: <output>

	output.elem =
		element output { output.inner & output.attrs }
	output.attrs =
		(	common.attrs
		&	common-form.attrs.name?
		&	common-form.attrs.disabled?
		&	output.attrs.for?
		#FIXME figure out how onchange, onforminput and onformchange
		#fit together with a scripting module.
		&	common.attrs.aria.implicit.region?
		)
		output.attrs.for = 
			attribute for {
				common.data.idrefs #REVISIT spec says space--not whitespace
			}
	output.inner =
		( common.inner.phrase )

	common.elem.phrase |= output.elem

## Text Area: <textarea>, extensions

	textarea.attrs.rows-and-cols-wf1.inner &=
		notAllowed
	textarea.attrs.rows-and-cols-wf1 |= 
		empty
	textarea.attrs &=
		(	common-form.attrs.maxlength?
		&	common-form.attrs.pattern? 
		&	common-form.attrs.inputmode?
		&	common-form.attrs.required? 
		&	textarea.attrs.accept?
		&	textarea.attrs.rows?
		&	(	(	textarea.attrs.wrap.hard 
				&	textarea.attrs.cols
				)
			|	(	textarea.attrs.wrap.soft?
				&	textarea.attrs.cols?
				)
			)
		)
		textarea.attrs.accept =
			attribute accept {
				common.data.mimetype
			}
		textarea.attrs.wrap.hard =
			attribute wrap {
				w:string "hard"
			}
		textarea.attrs.wrap.soft =
			attribute wrap {
				w:string "soft"
			}
			
## Option Group: <optgroup>, extensions
	optgroup.inner &= 
		( optgroup.elem* )

## Selection Menu: <select>, extensions
	select.attrs &=
		(	common-form.attrs.accesskey?
		&	common-form.attrs.data?
		)

## List of Prefill Data: <datalist>

	#REVISIT should the options in datalist be non-selectable?

	datalist.elem.phrase=
		element datalist { option.elem* & common.inner.phrase & datalist.attrs }
	datalist.elem.prose =
		element datalist { option.elem* & common.inner.prose & datalist.attrs }
	datalist.attrs =
		(	common.attrs
		&	common-form.attrs.data?
		)

	common.elem.phrase |= datalist.elem.phrase
	common.elem.prose |= datalist.elem.prose

## Complex Submit Button: <button type='submit'>, extensions

	button.submit.attrs &=
		(	common-form.attrs.action? 
		&	common-form.attrs.autofocus? 
		&	input.attrs.enctype? 
		&	common-form.attrs.method? 
		&	common-form.attrs.replace? 
		&	common-form.attrs.target? 
		)
	
## Complex Reset Button: <button type='reset'>, extensions

	button.reset.attrs &=
		( common-form.attrs.autofocus? )
	
## Complex Push Button: <button type='button'>, extensions

	button.button.attrs &=
		( common-form.attrs.autofocus? )

## Form: <form>, extensions
	form.attrs.method.data |= 
		( w:string "put" | w:string "delete" )
	form.attrs.enctype.data |= 
		( w:string "application/x-www-form+xml" | w:string "text/plain" )
	form.attrs &= 
		(	common-form.attrs.replace?
		&	common-form.attrs.data?
		&	common-form.attrs.target?
		)
	
	form.elem.empty =
		element form { form.inner.empty & form.attrs }
	form.inner.empty =
		( empty )

	common.elem.metadata |=
		( form.elem.empty & nonHTMLizable )
	
## Fieldset: <fieldset>, extensions

	fieldset.attrs &=
		(	common-form.attrs.disabled?
		&	common-form.attrs.form?
		)

