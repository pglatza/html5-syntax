# #####################################################################
##  RELAX NG Schema for HTML 5: Core Scripting                        #
# #####################################################################

# #####################################################################
## Scripting Elements

## Inline Scripts: <script>

	script.elem.embedded =
		element script { script.inner.embedded & script.attrs.embedded }
	script.attrs.embedded =
		(	common.attrs
		&	script.attrs.type?
		)
	script.elem.imported =
		element script { script.inner.imported & script.attrs.imported }
	script.attrs.imported =
		(	common.attrs
		&	script.attrs.src
		&	script.attrs.defer?
		&	script.attrs.async?
		&	script.attrs.type?
		)
		script.attrs.src =
			attribute src {
				common.data.uri
			}
		script.attrs.defer =
			attribute defer {
				string "defer"
			}
		script.attrs.async =
			attribute async {
				string "async"
			} & v5only
		script.attrs.type =
			attribute type {
				common.data.mimetype
			}
	script.inner.embedded =
		( common.inner.anything )
	script.inner.imported =
		( empty )
		
	script.elem = 
		(	script.elem.embedded
		|	script.elem.imported
		)
		
	head.inner.misc |=
		( script.elem )

	common.inner.strict-inline &= script.elem*
	common.inner.strict-inline.static &= script.elem*
	common.inner.struct-inline &= script.elem*
	common.inner.struct-inline.static &= script.elem*
	common.inner.block &= script.elem*
	common.inner.block.static &= script.elem*

## Fallback Unscripted Content: <noscript>

	noscript.elem.strict-inline =
		element noscript { common.inner.strict-inline & noscript.attrs }
	noscript.elem.strict-inline.static =
		element noscript { common.inner.strict-inline.static & noscript.attrs }
	noscript.elem.struct-inline =
		element noscript { common.inner.struct-inline & noscript.attrs }
	noscript.elem.struct-inline.static =
		element noscript { common.inner.struct-inline.static & noscript.attrs }
	noscript.elem.block =
		element noscript { common.inner.block & noscript.attrs }
	noscript.elem.block.static =
		element noscript { common.inner.block.static & noscript.attrs }
	noscript.attrs =
		( common.attrs )

	common.inner.strict-inline &= noscript.elem.strict-inline*
	common.inner.strict-inline.static &= noscript.elem.strict-inline.static*
	common.inner.struct-inline &= noscript.elem.struct-inline*
	common.inner.struct-inline.static &= noscript.elem.struct-inline.static*
	common.inner.block &= noscript.elem.block*
	common.inner.block.static &= noscript.elem.block.static*

# #####################################################################
## Event Handler Attribute Definitions

	scripting.attr.common =
		(	scripting.attr.mouse
		&	scripting.attr.keyboard
		&	scripting.attr.focus
		)
	
	scripting.attr.mouse =
		(	scripting.attr.mouse.click?
		&	scripting.attr.mouse.dblclick?
		&	scripting.attr.mouse.down?
		&	scripting.attr.mouse.up?
		&	scripting.attr.mouse.over?
		&	scripting.attr.mouse.move?
		&	scripting.attr.mouse.out?
		)
		scripting.attr.mouse.click =
			attribute onclick { string }
		scripting.attr.mouse.dblclick =
			attribute ondblclick { string }
		scripting.attr.mouse.down =
			attribute onmousedown { string }
		scripting.attr.mouse.up =
			attribute onmouseup { string }
		scripting.attr.mouse.over =
			attribute onmouseover { string }
		scripting.attr.mouse.move =
			attribute onmousemove { string }
		scripting.attr.mouse.out =
			attribute onmouseout { string }
	
	scripting.attr.keyboard =
		(	scripting.attr.keyboard.press?
		&	scripting.attr.keyboard.down?
		&	scripting.attr.keyboard.up?
		)
		scripting.attr.keyboard.press =
			attribute onkeypress { string }
		scripting.attr.keyboard.down =
			attribute onkeydown { string }
		scripting.attr.keyboard.up =
			attribute onkeyup { string }
	
	
	scripting.attr.focus =
		(	scripting.attr.focus.gain?
		&	scripting.attr.focus.lose?
		)
		scripting.attr.focus.gain =
			attribute onfocus { string }
		scripting.attr.focus.lose =
			attribute onblur { string }
	
	scripting.attr.loading =
		(	scripting.attr.loading.load?
		&	scripting.attr.loading.unload?
		)
		scripting.attr.loading.load =
			attribute onload { string }
		scripting.attr.loading.unload =
			attribute onunload { string }


# #####################################################################
## Event Handler Attribute Assignments

	common.attrs.other &= scripting.attr.common
	
	body.attrs   &= scripting.attr.loading
