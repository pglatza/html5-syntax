# #####################################################################
##  RELAX NG Schema for HTML 5: Web Forms 1.0 markup                  #
# #####################################################################

# Shared attributes

input.attrs.accept = 
	attribute accept {
		form.data.accept
	}

input.attrs.accesskey = 
	attribute accesskey {
		form.data.accesskey
	}

input.attrs.alt = 
	attribute alt {
		string
	}

input.attrs.checked = 
	attribute checked {
		string "checked"
	}

input.attrs.disabled = 
	attribute disabled {
		string "disabled"
	}

input.attrs.maxlength = 
	attribute maxlength {
		common.data.integer.positive #REVISIT should this be non-negative?
	}

input.attrs.name = 
	attribute name {
		string #REVISIT should this be restricted somehow? No & and = perhaps?
	}

input.attrs.readonly = 
	attribute readonly {
		string "readonly"
	}

input.attrs.src = 
	attribute src {
		common.data.uri
	}

# REVISIT tabindex goes in common.attrs in WA 1.0



## A free-form text field: <input type='text'>
input.text.elem = 
	element input { input.text.attrs }

input.text.attrs = 
	(	common.attrs
	&	input.attrs.type.text?
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.maxlength? 
	&	input.attrs.name? 
	&	input.attrs.readonly? 
	&	input.attrs.value.text? 
	)
	
	input.attrs.type.text = 
		attribute type {
			string "text"
		}
	
	input.attrs.value.text =
		attribute value {
			string #REVISIT "nominally" free of line breaks?
		}
	
input.elem = input.text.elem

## A free-form text field for sensitive information: <input type='password'>
input.password.elem = 
	element input { input.password.attrs }

input.password.attrs = 
	(	common.attrs
	&	input.attrs.type.password
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.maxlength? 
	&	input.attrs.name? 
	&	input.attrs.readonly? 
	&	input.attrs.value.password? 
	)
	
	input.attrs.type.password = 
		attribute type {
			string "password"
		}
	
	input.attrs.value.password =
		attribute value {
			string #REVISIT "nominally" free of line breaks?			
		}
	
input.elem |= input.password.elem


## A set of zero or more values from a predefined list: <input type='checkbox'>
input.checkbox.elem = 
	element input { input.checkbox.attrs }

input.checkbox.attrs = 
	(	common.attrs
	&	input.attrs.type.checkbox
	&	input.attrs.accesskey?
	&	input.attrs.checked? 
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.checkbox? 
	)
	
	input.attrs.type.checkbox = 
		attribute type {
			string "checkbox"
		}
	
	input.attrs.value.checkbox =
		attribute value {
			string #REVISIT require non-empty value?
		}
	
input.elem |= input.checkbox.elem


## An enumerated value.: <input type='radio'>
input.radio.elem = 
	element input { input.radio.attrs }

input.radio.attrs = 
	(	common.attrs
	&	input.attrs.type.radio
	&	input.attrs.accesskey?
	&	input.attrs.checked? 
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.radio? 
	)
	
	input.attrs.type.radio = 
		attribute type {
			string "radio"
		}
	
	input.attrs.value.radio =
		attribute value {
			string #REVISIT require non-empty value?
		}
	
input.elem |= input.radio.elem


## Scripting hook button: <input type='button'>
input.button.elem = 
	element input { input.button.attrs }

input.button.attrs = 
	(	common.attrs
	&	input.attrs.type.button
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.button? 
	)
	
	input.attrs.type.button = 
		attribute type {
			string "button"
		}
	
	input.attrs.value.button =
		attribute value {
			string #REVISIT require non-empty value?
		}
	
input.elem |= input.button.elem


## An enumerated value that initiates form submission: <input type='submit'>
input.submit.elem = 
	element input { input.submit.attrs }

input.submit.attrs = 
	(	common.attrs
	&	input.attrs.type.submit
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.submit? 
	)
	
	input.attrs.type.submit = 
		attribute type {
			string "submit"
		}
	
	input.attrs.value.submit =
		attribute value {
			string #REVISIT require non-empty value?
		}
	
input.elem |= input.submit.elem


## Resetting the form: <input type='reset'>
input.reset.elem = 
	element input { input.reset.attrs }

input.reset.attrs = 
	(	common.attrs
	&	input.attrs.type.reset
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.reset? 
	)
	
	input.attrs.type.reset = 
		attribute type {
			string "reset"
		}
	
	input.attrs.value.reset =
		attribute value {
			string #REVISIT require non-empty value?
		}
	
input.elem |= input.reset.elem
# REVISIT does reset make sense outside a form?


## File upload: <input type='file'>
input.file.elem = 
	element input { input.file.attrs }

input.file.attrs = 
	(	common.attrs
	&	input.attrs.type.file
	&	input.attrs.accept?
	&	input.attrs.accesskey?
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	)
	
input.elem |= input.file.elem


## Hidden string: <input type='hidden'>
input.hidden.elem = 
	element input { input.hidden.attrs }

input.hidden.attrs = 
	(	common.attrs
	&	input.attrs.type.hidden
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.value.hidden? 
	)
	
	input.attrs.type.hidden = 
		attribute type {
			string "hidden"
		}
	
	input.attrs.value.hidden =
		attribute value {
			string
		}
	
input.elem |= input.hidden.elem


## A coordinate that initiates form submission: <input type='image'>
input.image.elem = 
	element input { input.image.attrs }

input.image.attrs = 
	(	common.attrs
	&	input.attrs.type.image
	&	input.attrs.accesskey?
	&	input.attrs.alt? 
	&	input.attrs.disabled? 
	&	input.attrs.name? 
	&	input.attrs.src? 
	)
	
	input.attrs.type.image = 
		attribute type {
			string "image"
		}
	
input.elem |= input.image.elem

