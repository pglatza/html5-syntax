# #####################################################################
##  RELAX NG Schema for HTML 5: Web Forms 1.0 markup                  #
# #####################################################################

## Shared attributes for form controls

	common-form.attrs =
		(	common-form.attrs.name?
		&	common-form.attrs.disabled?
		)
		
	common-form.attrs.name = 
		attribute name {
			string #REVISIT should this be restricted somehow? No & and = perhaps?
		}

	common-form.attrs.disabled = 
		attribute disabled {
			string "disabled"
		}

	common-form.attrs.accesskey = 
		attribute accesskey {
			common.data.character
		}

	common-form.attrs.readonly = 
		attribute readonly {
			string "readonly"
		}

	common-form.attrs.maxlength = 
		attribute maxlength {
			common.data.integer.positive #REVISIT should this be non-negative?
		}
	
	# REVISIT tabindex goes in common.attrs

## Shared attributes for <input>
	
	input.attrs.checked = 
		attribute checked {
			string "checked"
		}

## Text Field: <input type='text'>

	input.text.elem = 
		element input { input.text.attrs }
	input.text.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.text.attrs.type?
		&	common-form.attrs.accesskey?
		&	common-form.attrs.maxlength? 
		&	common-form.attrs.readonly? 
		&	input.text.attrs.value? 
		)		
		input.text.attrs.type = 
			attribute type {
				string "text"
			}
		input.text.attrs.value =
			attribute value {
				string #REVISIT "nominally" free of line breaks?
			}
		
	input.elem = input.text.elem

## Password Field: <input type='password'>

	input.password.elem = 
		element input { input.password.attrs }
	input.password.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.password.attrs.type
		&	common-form.attrs.accesskey?
		&	common-form.attrs.maxlength? 
		&	common-form.attrs.readonly? 
		&	input.password.attrs.value? 
		)
		input.password.attrs.type = 
			attribute type {
				string "password"
			}
		input.password.attrs.value =
			attribute value {
				string #REVISIT "nominally" free of line breaks?			
			}
		
	input.elem |= input.password.elem
		
## Checkbox: <input type='checkbox'>

	input.checkbox.elem = 
		element input { input.checkbox.attrs }
	input.checkbox.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.checkbox.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.checked? 
		&	input.checkbox.attrs.value? 
		)
		input.checkbox.attrs.type = 
			attribute type {
				string "checkbox"
			}
		input.checkbox.attrs.value =
			attribute value {
				string #REVISIT require non-empty value?
			}
		
	input.elem |= input.checkbox.elem
	
## Radiobutton: <input type='radio'>

	input.radio.elem = 
		element input { input.radio.attrs }
	input.radio.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.radio.attrs.type
		&	common-form.attrs.accesskey?
		&	input.attrs.checked? 
		&	input.radio.attrs.value? 
		)
		input.radio.attrs.type = 
			attribute type {
				string "radio"
			}
		input.radio.attrs.value =
			attribute value {
				string #REVISIT require non-empty value?
			}
		
	input.elem |= input.radio.elem
	
## Scripting Hook Button: <input type='button'>

	input.button.elem = 
		element input { input.button.attrs }
	input.button.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.button.attrs.type
		&	common-form.attrs.accesskey?
		&	input.button.attrs.value? 
		)
		input.button.attrs.type = 
			attribute type {
				string "button"
			}
		input.button.attrs.value =
			attribute value {
				string #REVISIT require non-empty value?
			}
		
	input.elem |= input.button.elem
	#REVISIT should this be enabled by a scripting module only?
	
## Submit Button: <input type='submit'>

	input.submit.elem = 
		element input { input.submit.attrs }
	input.submit.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.submit.attrs.type
		&	common-form.attrs.accesskey?
		&	input.submit.attrs.value? 
		)
		input.submit.attrs.type = 
			attribute type {
				string "submit"
			}
		input.submit.attrs.value =
			attribute value {
				string #REVISIT require non-empty value?
			}
		
	input.elem |= input.submit.elem
		
## Reset Button: <input type='reset'>

	input.reset.elem = 
		element input { input.reset.attrs }
	input.reset.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.reset.attrs.type
		&	common-form.attrs.accesskey?
		&	input.reset.attrs.value? 
		)
		input.reset.attrs.type = 
			attribute type {
				string "reset"
			}
		input.reset.attrs.value =
			attribute value {
				string #REVISIT require non-empty value?
			}
		
	input.elem |= input.reset.elem
	# REVISIT does reset make sense outside a form?
		
## File Upload: <input type='file'>

	input.file.elem = 
		element input { input.file.attrs }
	input.file.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.file.attrs.type
		&	input.file.attrs.accept?
		&	common-form.attrs.accesskey?
		)
		input.file.attrs.type = 
			attribute type {
				string "file"
			}
		input.file.attrs.accept = 
			attribute accept {
				form.data.mimetypelist
			}

	input.elem |= input.file.elem
	
## Hidden String: <input type='hidden'>

	input.hidden.elem = 
		element input { input.hidden.attrs }
	input.hidden.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.hidden.attrs.type
		&	input.hidden.attrs.value? 
		)
		input.hidden.attrs.type = 
			attribute type {
				string "hidden"
			}
		input.hidden.attrs.value =
			attribute value {
				string
			}
		
	input.elem |= input.hidden.elem
		
## Image Submit Button: <input type='image'>

	input.image.elem = 
		element input { input.image.attrs }
	input.image.attrs = 
		(	common.attrs
		&	common-form.attrs
		&	input.image.attrs.type
		&	common-form.attrs.accesskey?
		&	input.image.attrs.alt? 
		&	input.image.attrs.src? 
		)	
		input.image.attrs.type = 
			attribute type {
				string "image"
			}
		input.image.attrs.alt = 
			attribute alt {
				string
			}
		input.image.attrs.src = 
			attribute src {
				common.data.uri
			}
	
	input.elem |= input.image.elem
	
	common.inner.struct-inline &= input.elem*
	common.inner.strict-inline &= input.elem*
	# REVISIT should hidden also go to static?

## Text Area: <textarea>

	textarea.elem =
		element textarea { textarea.inner & textarea.attrs }
	textarea.attrs =
		(	common.attrs
		&	common-form.attrs
		&	common-form.attrs.accesskey?
		&	common-form.attrs.readonly?
		&	textarea.attrs.rows-and-cols-wf1
		#FIXME onfocus, onblur, onselect,onchange
		)
		# This is ugly. Is this necessary?
		textarea.attrs.rows-and-cols-wf1 = 
			textarea.attrs.rows-and-cols-wf1.inner	
		textarea.attrs.rows-and-cols-wf1.inner =
			(	textarea.attrs.cols
			&	textarea.attrs.rows
			)
		textarea.attrs.cols = 
			attribute cols {
				common.data.integer.positive
			}
		textarea.attrs.rows = 
			attribute rows {
				common.data.integer.positive
			}
	textarea.inner =
		( text )

	common.inner.struct-inline &= textarea.elem*
	common.inner.strict-inline &= textarea.elem*

# testing diffs
