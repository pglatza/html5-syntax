namespace local = ""
# #####################################################################
##  RELAX NG Schema for HTML 5: Embedded Content                      #
# #####################################################################

#######################################################################
## Replaced Content

## Images: <img>

	img.elem =
		element img { img.inner & img.attrs }
	img.attrs =
		(	common.attrs
		&	img.attrs.src
		&	img.attrs.alt
		&	img.attrs.height?
		&	img.attrs.width?
		&	img.attrs.usemap?
		&	img.attrs.ismap?
		)
		img.attrs.src =
			attribute src {
				common.data.uri
			}
		img.attrs.alt =
			attribute alt {
				text
			}
		img.attrs.height =
			attribute height {
				common.data.integer.positive
			}
		img.attrs.width =
			attribute width {
				common.data.integer.positive
			}
		img.attrs.usemap =
			attribute usemap {
				common.data.hashed-idref
			}
		img.attrs.ismap =
			attribute ismap {
				string "ismap"
			}
	img.inner =
		empty

	common.elem.strict-inline |= img.elem
	common.elem.strict-inline.static |= img.elem
	common.elem.struct-inline |= img.elem
	common.elem.struct-inline.static |= img.elem
	common.elem.embedded |= img.elem
	common.elem.embedded.static |= img.elem

## Plug-ins: <embed>

	embed.elem =
		element embed { embed.inner & embed.attrs }
	embed.attrs =
		(	embed.attrs.src
		&	embed.attrs.type?
		&	embed.attrs.height?
		&	embed.attrs.width?
		&	embed.attrs.other*
		)
		embed.attrs.src =
			attribute src {
				common.data.uri
			}
		embed.attrs.type =
			attribute type {
				common.data.mimetype
			}
		embed.attrs.height =
			attribute height {
				common.data.integer.positive
			}
		embed.attrs.width =
			attribute width {
				common.data.integer.positive
			}
		embed.attrs.other = # REVISIT common.attrs
			attribute local:* - ( src | type | height | width ) {
				string
			}
	embed.inner =
		empty

	common.elem.strict-inline |= embed.elem
	common.elem.strict-inline.static |= embed.elem
	common.elem.struct-inline |= embed.elem
	common.elem.struct-inline.static |= embed.elem
	common.elem.embedded |= embed.elem
	common.elem.embedded.static |= embed.elem

## Generic Objects: <object>

	object.elem.strict-inline =
		element object { object.inner.strict-inline & object.attrs }
	object.elem.strict-inline.static =
		element object { object.inner.strict-inline.static & object.attrs }
	object.elem.struct-inline =
		element object { object.inner.struct-inline & object.attrs }
	object.elem.struct-inline.static =
		element object { object.inner.struct-inline.static & object.attrs }
	object.elem.embedded =
		element object { object.inner.embedded & object.attrs }
	object.elem.embedded.static =
		element object { object.inner.embedded.static & object.attrs }
	object.attrs =
		(	common.attrs
		&	(	object.attrs.data
			|	object.attrs.type
			)
		&	object.attrs.archive?
#		&	object.attrs.classid?
#		&	object.attrs.codebase?
#		&	object.attrs.codetype?
		&	object.attrs.height?
		&	object.attrs.width?
		&	object.attrs.usemap?
		)
		object.attrs.data =
			attribute data {
				common.data.uri
			}
		object.attrs.type =
			attribute type {
				common.data.mimetype
			}
		object.attrs.archive =
			attribute archive {
				common.data.uris
			}
		object.attrs.classid =
			attribute classid {
				common.data.uri
			}
		object.attrs.codebase =
			attribute codebase {
				common.data.uri
			}
		object.attrs.codetype =
			attribute codetype {
				common.data.mimetype
			}
		object.attrs.height =
			attribute height {
				common.data.integer.positive
			}
		object.attrs.width =
			attribute width {
				common.data.integer.positive
			}
		object.attrs.usemap =
			attribute usemap {
				common.data.uri
			}
	object.inner.strict-inline =
		(	param.elem*
		,	common.inner.strict-inline
		)
	object.inner.strict-inline.static =
		(	param.elem*
		,	common.inner.strict-inline.static
		)
	object.inner.struct-inline =
		(	param.elem*
		,	common.inner.struct-inline
		)
	object.inner.struct-inline.static =
		(	param.elem*
		,	common.inner.struct-inline.static
		)
	object.inner.embedded =
		(	param.elem*
		,	(	common.inner.block
			|	object.elem.embedded
			)
		)
	object.inner.embedded.static =
		(	param.elem*
		,	(	common.inner.block.static
			|	object.elem.embedded.static
			)
		)

	common.elem.strict-inline |= object.elem.strict-inline
	common.elem.strict-inline.static |= object.elem.strict-inline.static
	common.elem.struct-inline |= object.elem.struct-inline
	common.elem.struct-inline.static |= object.elem.struct-inline.static
	common.elem.embedded |= object.elem.embedded
	common.elem.embedded.static |= object.elem.embedded.static

## Java Applets: <applet>

	applet.elem.strict-inline =
		element applet { applet.inner.strict-inline & applet.attrs }
	applet.elem.strict-inline.static =
		element applet { applet.inner.strict-inline.static & applet.attrs }
	applet.elem.struct-inline =
		element applet { applet.inner.struct-inline & applet.attrs }
	applet.elem.struct-inline.static =
		element applet { applet.inner.struct-inline.static & applet.attrs }
	applet.elem.block =
		element applet { applet.inner.block & applet.attrs }
	applet.elem.block.static =
		element applet { applet.inner.block.static & applet.attrs }
	applet.attrs =
		(	common.attrs
		&	applet.attrs.archive?
		&	applet.attrs.code
		&	applet.attrs.codebase?
		&	applet.attrs.name?
		&	applet.attrs.height
		&	applet.attrs.width
		)
		applet.attrs.archive =
			attribute archive {
				common.data.uri #FIXME *comma* separated URI list (*grumble*)
			}
		applet.attrs.code =
			attribute code {
				token
			}
		applet.attrs.codebase =
			attribute codebase {
				common.data.uri
			}
		applet.attrs.name =
			attribute name {
				string #FIXME refine
			}
		applet.attrs.height =
			attribute height {
				common.data.integer.positive
			}
		applet.attrs.width =
			attribute width {
				common.data.integer.positive
			}
	applet.inner.strict-inline =
		(	param.elem*
		,	common.inner.strict-inline
		)
	applet.inner.strict-inline.static =
		(	param.elem*
		,	common.inner.strict-inline.static
		)
	applet.inner.struct-inline =
		(	param.elem*
		,	common.inner.struct-inline
		)
	applet.inner.struct-inline.static =
		(	param.elem*
		,	common.inner.struct-inline.static
		)
	applet.inner.block =
		(	param.elem*
		,	common.inner.block
		)
	applet.inner.block.static =
		(	param.elem*
		,	common.inner.block.static
		)

# REVISIT commented out as per
# http://lists.whatwg.org/htdig.cgi/whatwg-whatwg.org/2005-November/005137.html
#	common.elem.strict-inline |= applet.elem.strict-inline
#	common.elem.strict-inline.static |= applet.elem.strict-inline.static
#	common.elem.struct-inline |= applet.elem.struct-inline
#	common.elem.struct-inline.static |= applet.elem.struct-inline.static
#	common.elem.embedded |= applet.elem.block
#	common.elem.embedded.static |= applet.elem.block

## Initialization Parameters: <param>

	param.elem =
		element param { param.inner & param.attrs }
	param.attrs =
		(	common.attrs
		&	param.attrs.name
		&	param.attrs.value
		)
		param.attrs.name =
			attribute name {
				string
			}
		param.attrs.value =
			attribute value {
				string
			}
	param.inner =
		( empty )

## Inline Frame: <iframe>

	iframe.elem =
		element iframe { iframe.inner & iframe.attrs }
	iframe.attrs =
		(	common.attrs
		&	iframe.attrs.src?
#		&	iframe.attrs.width?
#		&	iframe.attrs.height?
		)
		iframe.attrs.src =
			attribute src {
				common.data.uri
			}
#		iframe.attrs.height =
#			attribute height {
#				common.data.integer.positive
#			}
#		iframe.attrs.width =
#			attribute width {
#				common.data.integer.positive
#			}
	iframe.inner =
		( text )

	common.elem.strict-inline |= iframe.elem
	common.elem.strict-inline.static |= iframe.elem
	common.elem.struct-inline |= iframe.elem
	common.elem.struct-inline.static |= iframe.elem
	common.elem.embedded |= iframe.elem
	common.elem.embedded.static |= iframe.elem

#######################################################################
## Image Maps

## Map Definition: <map>

	map.elem =
		element map { map.inner & map.attrs }
	map.elem.static =
		element map { map.inner.static & map.attrs }
	map.attrs =
		( common.attrs )
	map.inner =
		( common.inner.block )
	map.inner.static =
		( common.inner.block.static )

	common.elem.block |= map.elem
	common.elem.block.static |= map.elem.static

## Map Area Definition: <area>

	area.elem =
		element area { area.inner & area.attrs }
	area.attrs =
		(	common.attrs
		&	area.attrs.alt?
		&	area.attrs.href?
		&	area.attrs.target?
		&	area.attrs.ping?
		&	area.attrs.rel?
		&	area.attrs.media?
		&	area.attrs.hreflang?
		&	area.attrs.type?
		&	area.attrs.shape?
		)
		area.attrs.alt =
			attribute alt {
				text
			}
		area.attrs.href =
			attribute href {
				common.data.uri
			}
		area.attrs.target =
			attribute target {
				common.data.browsingcontext
			}
		area.attrs.ping =
			attribute ping {
				common.data.uris
			} & v5only
		area.attrs.rel =
			attribute rel {
				common.data.tokens
			}
		area.attrs.media =
			attribute media {
				common.data.mediaquery
			}
		area.attrs.hreflang =
			attribute hreflang {
				common.data.langcode
			}
		area.attrs.type =
			attribute type {
				common.data.mimetype
			}
		area.attrs.shape =
			(	( area.attrs.shape.rect?  & area.attrs.coords.rect   )
			|	( area.attrs.shape.circle & area.attrs.coords.circle )
			|	( area.attrs.shape.poly   & area.attrs.coords.poly   )
			|	( area.attrs.shape.default )
			)
		area.attrs.shape.rect =
			attribute shape {
				string "rect"
			}
		area.attrs.coords.rect =
			attribute coords {
				xsd:token {
					pattern = "-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+"
				}
			}
		area.attrs.shape.circle =
			attribute shape {
				string "circle"
			}
		area.attrs.coords.circle =
			attribute coords {
				xsd:token {
					pattern = "-?[0-9]+,-?[0-9]+,[0-9]+"
				}
			}
		area.attrs.shape.poly =
			attribute shape {
				string "poly"
			}
		area.attrs.coords.poly =
			attribute coords {
				xsd:token {
					pattern = "-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+,-?[0-9]+(,-?[0-9]+,-?[0-9]+)*"
				}
			}
		area.attrs.shape.default =
			attribute shape {
				string "default"
			}
	area.inner =
		( empty )

	common.elem.strict-inline |= area.elem
	common.elem.strict-inline.static |= area.elem
	common.elem.struct-inline |= area.elem
	common.elem.struct-inline.static |= area.elem
