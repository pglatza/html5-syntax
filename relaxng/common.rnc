datatypes w = "http://whattf.org/datatype-draft"

# #####################################################################
##  RELAX NG Schema for HTML 5: Common Definitions                    #
# #####################################################################


# #####################################################################
##  Language Parameters - redefine in inclusion block as necessary    #
# #####################################################################

## Root Definition

	start = html.elem

## HTML vs. XHTML restrictions

	XMLonly = empty
	HTMLonly = notAllowed

## HTML 4 Compatibility - set to notAllowed to disallow markup introduced in HTML 5
#                         (This only affects mixed-version modules; wholly HTML5
#                          modules should simply be left out of the inclusion list.)

	v5only = empty

## HTML Compatibility Switches - set to notAllowed to disallow

	## XML features that can't be roundtripped HTML <-> XHTML
	#  (xml:base on elements other than <html>)
	nonRoundtrippable = empty

	## XML features that can't be serialized as HTML
	#  (structured inline elements in <p>)
	nonHTMLizable = empty

# #####################################################################
##  Wildcards                                                         #
# #####################################################################

## Any attribute from any namespace

	common.attr.anything =
#		attribute * { text }*
		attribute foo { text }*

## Any element from any namespace

	common.elem.anything =
		element * { common.inner.anything & common.attr.anything }

## Any content from any namespace

	common.inner.anything =
		(	text
		&	common.elem.anything*
		)

# #####################################################################
##  Deletion Hooks                                                    #
# #####################################################################

	common.del.strict-inline =
		( notAllowed )
	common.del.struct-inline =
		( notAllowed )
	common.del.block =
		( notAllowed )

# #####################################################################
##  Common Element Classes                                            #
# #####################################################################

## Metadata Elements

	common.elem.metadata =
		( notAllowed )

## Strictly Inline Elements

	common.elem.strict-inline =
		( notAllowed )

## Structured Inline Elements

	common.elem.struct-inline =
		( notAllowed )

## Block Elements

	common.elem.block =
		( notAllowed )

## Embedded Content

	common.elem.embedded =
		( notAllowed )

# #####################################################################
##  Common Content Models                                             #
# #####################################################################

## Metadata Content

	common.inner.metadata =
		( common.elem.metadata* )

## Strictly Inline Content

	common.inner.strict-inline =
		( text & common.elem.strict-inline* )

## Structured Inline Content

	common.inner.struct-inline =
		( text & common.elem.struct-inline* )

## Block Content

	common.inner.block =
		( common.elem.block* )

## Inline OR Block Content

	common.inner.bimorphic =
		(	(	text
			&	(	common.elem.struct-inline
				|	common.del.block
				)*
			)
		|	(	common.elem.block
			|	common.del.struct-inline
			)*
		)

## Strict Inline OR Block Content

	#REVISIT remove if wf1 doesn't really need these

	common.inner.strict-bimorphic =
		(	(	text
			&	(	common.elem.strict-inline
				|	common.del.block
				)*
			)
		|	(	common.elem.block
			|	common.del.strict-inline
			)*
		)

# #####################################################################
##  Common Attributes                                                 #
# #####################################################################

# When updating, check <bdo> definition too

common.attrs =
	(	common.attrs.basic
	&	common.attrs.i18n
	&	common.attrs.present
	&	common.attrs.interact
	&	common.attrs.repetition
	&	common.attrs.scripting
	&	common.attrs.other
	)

common.attrs.basic =
	(	(	common.attrs.id
		|	common.attrs.xml-id
		)? # REVISIT assuming only either one is allowed
	&	common.attrs.class?
	&	common.attrs.title?
	&	common.attrs.base?
	)
	common.attrs.id =
		attribute id {
			common.data.id
		}
	common.attrs.xml-id =
		attribute xml:id {
			xsd:NCName
		} & XMLonly
	common.attrs.class =
		attribute class {
			common.data.tokens
		}
	common.attrs.title =
		attribute title {
			text
		}
	common.attrs.base =
		common.attrs.xmlbase
		& nonRoundtrippable
	common.attrs.xmlbase =
		attribute xml:base {
			common.data.uri
		} & XMLonly

common.attrs.i18n =
	(	common.attrs.dir?
	&	common.attrs.language?
	)
	common.attrs.dir =
		attribute dir {
			w:string "ltr" | w:string "rtl"
		}
	common.attrs.language =
		attribute xml:lang {
			common.data.langcode
		}
#	common.attrs.language =
#		(	common.attrs.lang
#		|	common.attrs.xmllang
#		)
#	common.attrs.lang =
#		attribute lang {
#			common.data.langcode
#		} & HTMLonly
#	common.attrs.xmllang =
#		attribute xml:lang {
#			common.data.langcode
#		} & XMLonly

common.attrs.present =
	(	common.attrs.style?
	&	common.attrs.tabindex?
	)
	common.attrs.style =
		attribute style {
			string
		}
	common.attrs.tabindex =
		attribute tabindex {
			common.data.integer
		}

common.attrs.interact =
	empty

common.attrs.repetition =
	empty

common.attrs.scripting =
	empty

common.attrs.other =
	empty

# #####################################################################
##  Common Datatypes                                                  #
# #####################################################################

## Names and Tokens

	common.data.tokens =
		list { token* }
		
	common.data.tokens.comma-separated =
		xsd:string {
			pattern = "[^,]+(,[^,]+)*"
		}

	common.data.character = 
		string #FIXME
		
	common.data.browsingcontext =
		w:browsing-context
#		xsd:string {
#			pattern = "()|([^_].*)|(_[bB][lL][aA][nN][kK])|(_[sS][eE][lL][fF])|(_[pP][aA][rR][eE][nN][tT])|(_[tT][oO][pP])"
#		}
		

## IDs and IDREFs

	common.data.id =
		w:ID
#		xsd:string {
#			pattern = "\S+"
#		}

	common.data.idref =
		w:IDREF
		
	common.data.idrefs =
		w:IDREFS

	common.data.hashed-idref =
		w:hashed-id-ref	
#		xsd:string {
#			pattern = "#.+"
#		}

## Numerical

	common.data.integer =
		w:integer
#		xsd:string {
#			pattern = "-?[0-9]+"
#		}

	common.data.integer.positive =
		w:integer-positive
#		xsd:string {
#			pattern = "0*[1-9][0-9]*"
#		}

	common.data.integer.non-negative =
		w:integer-non-negative
#		xsd:string {
#			pattern = "[0-9]+"
#		}
		
#	common.data.percent =
#		xsd:string {
#			pattern = "(100)|([1-9]?[0-9](\.[0-9]+)?)%"
#		}
		
	common.data.float =
		w:float
#		xsd:string {
#			pattern = "-?((\.[0-9]+)|([0-9]+(\.[0-9]*)?))"
#		}

	common.data.float.positive =
		w:float-positive
#		xsd:string {
#			pattern = "0*((\.0*[1-9][0-9]*)|([1-9][0-9]*(\.[0-9]*)?))"
#		}
		
	common.data.float.non-negative =
		w:float-non-negative
#		xsd:string {
#			pattern = "((\.[0-9]+)|([0-9]+(\.[0-9]*)?))"
#		}
		
## Temporal

	common.data.datetime =
		w:datetime-tz

	common.data.date-or-time =
		w:date-or-time

	common.data.timeoffset =
		string #FIXME

## IRIs

	common.data.uri =
		w:string "" | w:iri-ref

	common.data.uris =
		list { w:iri-ref* }

	common.data.uri.absolute =
		w:iri

## MIME types

	common.data.mimetype =
		w:mime-type

## Media Queries

	common.data.mediaquery =
		w:media-query

## Language Codes

	common.data.langcode =
		w:string "" | w:language
